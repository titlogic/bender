// Generated by CoffeeScript 1.10.0
var deprecatedImage, ensureImageExtension, ensureResult, imageMe, safeSearchValue;

module.exports = function(robot) {
  robot.hear(/(image|img)( me)? (.*)/i, function(msg) {
    return imageMe(msg, msg.match[3], function(url) {
      return msg.send(url);
    });
  });
  robot.hear(/animate( me)? (.*)/i, function(msg) {
    return imageMe(msg, msg.match[2], true, function(url) {
      return msg.send(url);
    });
  });
  if (process.env.HUBOT_GOOGLE_IMAGES_HEAR != null) {
    robot.hear(/^(image|img) me (.*)/i, function(msg) {
      return imageMe(msg, msg.match[1], function(url) {
        return msg.send(url);
      });
    });
    robot.hear(/^animate me (.*)/i, function(msg) {
      return imageMe(msg, msg.match[1], true, function(url) {
        return msg.send(url);
      });
    });
  }
  return robot.respond(/(?:mo?u)?sta(?:s|c)h(?:e|ify)?(?: me)? (.*)/i, function(msg) {
    var encodedUrl, imagery, mustacheBaseUrl, mustachify, ref;
    mustacheBaseUrl = ((ref = process.env.HUBOT_MUSTACHIFY_URL) != null ? ref.replace(/\/$/, '') : void 0) || "http://mustachify.me";
    mustachify = mustacheBaseUrl + "/rand?src=";
    imagery = msg.match[1];
    if (imagery.match(/^https?:\/\//i)) {
      encodedUrl = encodeURIComponent(imagery);
      return msg.send("" + mustachify + encodedUrl);
    } else {
      return imageMe(msg, imagery, false, true, function(url) {
        encodedUrl = encodeURIComponent(url);
        return msg.send("" + mustachify + encodedUrl);
      });
    }
  });
};

safeSearchValue = function(msg) {
  var str, warnings;
  str = process.env.HUBOT_GOOGLE_SAFE_SEARCH === 'random' ? Math.random() < 0.1 ? 'off' : 'high' : process.env.HUBOT_GOOGLE_SAFE_SEARCH || 'high';
  if (str === 'off') {
    warnings = ["[WARNING]: safe search off. you may see some titties! WiioooH!", "SACAGAWEA!!!", "Do you like dragons? DIIIICKKKK DRAGOOONNN!!", "Filthy filthy thang.", "Welp, good luck with this one.", "Boobs.", "Fuckit, we're going raw.", "Fuck off. :finger:", "Hey, guess what? FUCK YOU. ", "...", "Fa la la la la .... la la la la", "I am high right now.", "Anybody got a lighter?", "Oh, its a trap.", "Get ready to /collapse Dan. ", "OYSTER COCKS!!!", "fuck off.", ":shit:  :shit:  :shit:  :shit:  :shit:  :shit:  :shit:  :shit:  :shit:  :shit:  :shit: "];
    msg.send(msg.random(warnings));
  }
  return str;
};

imageMe = function(msg, query, animated, faces, cb) {
  var googleApiKey, googleCseId, q, url;
  if (typeof animated === 'function') {
    cb = animated;
  }
  if (typeof faces === 'function') {
    cb = faces;
  }
  googleCseId = process.env.HUBOT_GOOGLE_CSE_ID;
  if (googleCseId) {
    googleApiKey = process.env.HUBOT_GOOGLE_CSE_KEY;
    if (!googleApiKey) {
      msg.robot.logger.error("Missing environment variable HUBOT_GOOGLE_CSE_KEY");
      msg.send("Missing server environment variable HUBOT_GOOGLE_CSE_KEY.");
      return;
    }
    q = {
      q: query,
      searchType: 'image',
      safe: safeSearchValue(msg),
      fields: 'items(link)',
      cx: googleCseId,
      key: googleApiKey
    };
    if (animated === true) {
      q.fileType = 'gif';
      q.hq = 'animated';
      q.tbs = 'itp:animated';
    }
    if (faces === true) {
      q.imgType = 'face';
    }
    url = 'https://www.googleapis.com/customsearch/v1';
    return msg.http(url).query(q).get()(function(err, res, body) {
      var error, i, image, len, ref, ref1, response, results;
      if (err) {
        if (res.statusCode === 403) {
          msg.send("Daily image quota exceeded, using alternate source.");
          deprecatedImage(msg, query, animated, faces, cb);
        } else {
          msg.send("Encountered an error :( " + err);
        }
        return;
      }
      if (res.statusCode !== 200) {
        msg.send("Bad HTTP response :( " + res.statusCode);
        return;
      }
      response = JSON.parse(body);
      if (response != null ? response.items : void 0) {
        image = msg.random(response.items);
        return cb(ensureResult(image.link, animated));
      } else {
        msg.send("Oops. I had trouble searching '" + query + "'. Try later.");
        if ((ref = response.error) != null ? ref.errors : void 0) {
          ref1 = response.error.errors;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            error = ref1[i];
            results.push((function(error) {
              msg.robot.logger.error(error.message);
              if (error.extendedHelp) {
                return msg.robot.logger.error("(see " + error.extendedHelp + ")");
              }
            })(error));
          }
          return results;
        }
      }
    });
  } else {
    return deprecatedImage(msg, query, animated, faces, cb);
  }
};

deprecatedImage = function(msg, query, animated, faces, cb) {
  var q;
  q = {
    v: '1.0',
    rsz: '8',
    q: query,
    safe: safeSearchValue(msg)
  };
  if (animated === true) {
    q.as_filetype = 'gif';
    q.q += ' animated';
  }
  if (faces === true) {
    q.as_filetype = 'jpg';
    q.imgtype = 'face';
  }
  return msg.http('https://ajax.googleapis.com/ajax/services/search/images').query(q).get()(function(err, res, body) {
    var image, images, ref;
    if (err) {
      msg.send("Encountered an error :( " + err);
      return;
    }
    if (res.statusCode !== 200) {
      msg.send("Bad HTTP response :( " + res.statusCode);
      return;
    }
    images = JSON.parse(body);
    images = (ref = images.responseData) != null ? ref.results : void 0;
    if ((images != null ? images.length : void 0) > 0) {
      image = msg.random(images);
      return cb(ensureResult(image.unescapedUrl, animated));
    } else {
      return msg.send("Sorry, I found no results for '" + query + "'.");
    }
  });
};

ensureResult = function(url, animated) {
  if (animated === true) {
    return ensureImageExtension(url.replace(/(giphy\.com\/.*)\/.+_s.gif$/, '$1/giphy.gif'));
  } else {
    return ensureImageExtension(url);
  }
};

ensureImageExtension = function(url) {
  if (/(png|jpe?g|gif)$/i.test(url)) {
    return url;
  } else {
    return url + "#.png";
  }
};
